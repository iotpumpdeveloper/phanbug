#!/usr/bin/env php
<?php
/**
 * Usage: 
 * phanbug --cmd "php hello.php" --action inspect --file libs/util.php --line 9
 * phanbug --cmd "php hello.php" --action inspect --file libs/util.php --line 9 --variable length
 */
class Phanbug
{
    private $action;
    private $cmd;
    private $cmdOptions;

    private $actionMap = [
        'inspect' => 'inspect'
    ];

    private $phanbugInspectBeginningBlock = "/* phanbug_inspect_start */";    

    public function __construct() {
        //process the command line arguments
        $this->processArgs();
    }

    public function inspect() {
        $this->cmdOptions = array_merge($this->cmdOptions, [
            "file:",     // the file to inspect
            "line:",    // the line number
            "variable:" // the variable to inspect
        ]);
        
        $options = getopt("", $this->cmdOptions);

        if (!isset($options['file'])) {
            print "Missing file: --file\n";
            exit();
        }
        if (!isset($options['line'])) {
            print "Missing line number: --line\n";
            exit();
        }

        $sourceFile = $options['file'];
        $lineNumber = $options['line'];

        //clean all previous breakpoints
        $this->cleanBreakpoints($sourceFile);
        
        //now add breakpoint
        $this->addBreakPoint($sourceFile, $lineNumber, $options);

        //run the cmd
        $output = shell_exec($this->cmd);
        if ($output === NULL) {
            print "Fail running command {$this->cmd}\n";
            exit();
        }
        print $output."\n";

        //clean up the break points again
        $this->cleanBreakpoints($sourceFile);
    }

    private function processArgs() {
        $this->cmdOptions = [
            "action:",     // the action
            "cmd:",    // the command to run
        ];
        $options = getopt("", $this->cmdOptions);

        if (!isset($options['action'])) {
            print "Missing action: --action\n";
            exit();
        }

        if (!isset($options['cmd'])) {
            print "Missing cmd: --cmd\n";
            exit();
        }

        $this->action = $options['action'];
        $this->cmd = $options['cmd'];

        if (!isset($this->actionMap[$this->action])) {
            print "Invalid action {$this->action}\n";
            print "Available actions:\n";
            print implode("\n", array_keys($this->actionMap))."\n";
            exit();
        }

        $this->{$this->action}();
    }

    private function cleanBreakpoints($sourceFile) {
        $content = file_get_contents($sourceFile);
        $lines = explode("\n", $content);
        $numOfLines = count($lines);
        for ($i = 0; $i < $numOfLines; $i++) {
            $pos = strpos($lines[$i], $this->phanbugInspectBeginningBlock);
            if ( $pos !== FALSE) {
                $lines[$i] = substr($lines[$i], 0, $pos);
            } 
        }
        $newFileContent = implode("\n", $lines);
        file_put_contents($sourceFile, $newFileContent);
    }

    private function addBreakPoint($sourceFile, $lineNumber, $options) {
        $content = file_get_contents($sourceFile);
        $lines = explode("\n", $content);
        if (!isset($options['variable'])) {
            //no variable is specified, inspect all user defined variables
            $lines[$lineNumber - 1] .= "{$this->phanbugInspectBeginningBlock} print 'phanbug breakpoint:'; print_r(array_diff_key(get_defined_vars(), array_flip(['GLOBALS', '_FILES', '_COOKIE', '_POST', '_GET', '_SERVER', '_ENV', '_REQUEST', 'argc', 'argv'])));exit;";
        } else {
            //just inspect the specific variable
            $lines[$lineNumber - 1] .= "{$this->phanbugInspectBeginningBlock} print 'phanbug breakpoint:';print_r(\${$options['variable']});exit;";
        }
        $newFileContent = implode("\n", $lines);
        file_put_contents($sourceFile, $newFileContent);
    }
}

new Phanbug();
